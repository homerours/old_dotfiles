" DEOPLETE
let g:deoplete#enable_at_startup = 1
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<TAB>"

" NERDTREE
nmap <leader>e :NERDTree<cr>
let NERDTreeShowBookmarks=1
let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
let NERDTreeChDirMode=0
let NERDTreeQuitOnOpen=1
let NERDTreeMouseMode=2
let NERDTreeShowHidden=1
let NERDTreeKeepTreeInNewTab=1
let g:nerdtree_tabs_open_on_gui_startup=0
" Arrow navigation
autocmd FileType nerdtree nmap <buffer> h o
autocmd FileType nerdtree nmap <buffer> l o

" TABULARIZE
nmap <Leader>a& :Tabularize /&<CR>
vmap <Leader>a& :Tabularize /&<CR>
nmap <Leader>a" :Tabularize /"<CR>
vmap <Leader>a" :Tabularize /"<CR>
nmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
vmap <Leader>a= :Tabularize /^[^=]*\zs=<CR>
nmap <Leader>a=> :Tabularize /=><CR>
vmap <Leader>a=> :Tabularize /=><CR>
nmap <Leader>a: :Tabularize /:<CR>
vmap <Leader>a: :Tabularize /:<CR>
nmap <Leader>a:: :Tabularize /:\zs<CR>
vmap <Leader>a:: :Tabularize /:\zs<CR>
nmap <Leader>a, :Tabularize /,<CR>
vmap <Leader>a, :Tabularize /,<CR>
nmap <Leader>a,, :Tabularize /,\zs<CR>
vmap <Leader>a,, :Tabularize /,\zs<CR>
nmap <Leader>a<Bar> :Tabularize /<Bar><CR>
vmap <Leader>a<Bar> :Tabularize /<Bar><CR>

" Neosnippets
" Plugin key-mappings.
" Note: It must be "imap" and "smap".  It uses <Plug> mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" For conceal markers.
"if has('conceal')
	  "set conceallevel=2 concealcursor=niv
"endif

" CTRL P
let g:ctrlp_working_path_mode = 'ra'
nnoremap <silent> <D-t> :CtrlP<CR>
nnoremap <silent> <D-r> :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
			\ 'dir':  '\.git$\|\.hg$\|\.svn$',
			\ 'file': '\.exe$\|\.so$\|\.dll$\|\.pyc$' }

if executable('ag')
	let s:ctrlp_fallback = 'ag %s --nocolor -l -g ""'
elseif executable('ack-grep')
	let s:ctrlp_fallback = 'ack-grep %s --nocolor -f'
elseif executable('ack')
	let s:ctrlp_fallback = 'ack %s --nocolor -f'
else
	let s:ctrlp_fallback = 'find %s -type f'
endif
if exists("g:ctrlp_user_command")
	unlet g:ctrlp_user_command
endif
let g:ctrlp_user_command = {
			\ 'types': {
			\ 1: ['.git', 'cd %s && git ls-files . --cached --exclude-standard --others'],
			\ 2: ['.hg', 'hg --cwd %s locate -I .'],
			\ },
			\ 'fallback': s:ctrlp_fallback
			\ }

if isdirectory(expand("~/.vim/bundle/ctrlp-funky/"))
	" CtrlP extensions
	let g:ctrlp_extensions = ['funky']

	"funky
	nnoremap <Leader>fu :CtrlPFunky<Cr>
endif

nmap <C-p> :FZF<CR>
" VIMTEX
let g:vimtex_enabled=1
"let g:vimtex_fold_enabled=1
let g:tex_flavor = 'latex'
let g:vimtex_latexmk_callback = 1
let g:vimtex_echo_ignore_wait = 1
"let g:vimtex_disable_version_warning = 1
let g:vimtex_compiler_latexmk = {'callback' : 0}
let g:tex_conceal=''


" Fugitive
"if isdirectory(expand("~/.vim/bundle/vim-fugitive/"))
	"nnoremap <silent> <leader>gs :Gstatus<CR>
	"nnoremap <silent> <leader>gd :Gdiff<CR>
	"nnoremap <silent> <leader>gc :Gcommit<CR>
	"nnoremap <silent> <leader>gb :Gblame<CR>
	"nnoremap <silent> <leader>gl :Glog<CR>
	"nnoremap <silent> <leader>gp :Git push<CR>
	"nnoremap <silent> <leader>gr :Gread<CR>
	"nnoremap <silent> <leader>gw :Gwrite<CR>
	"nnoremap <silent> <leader>ge :Gedit<CR>
	"nnoremap <silent> <leader>gi :Git add -p %<CR>
	"nnoremap <silent> <leader>gg :SignifyToggle<CR>
"endif


" Autopair
"let g:Autopairs = {'(':')', '[':']', '{':'}',"'":"'",'"':'"', "`":"`", '```':'```', '"""':'"""', "'''":"'''", '$':'$'}
"let g:AutoPairsMoveCharacter = "()[]{}\"'$"
au FileType tex let b:AutoPairs = AutoPairsDefine({'$':'$'})


let g:ale_fixers = {
\   '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'python': ['autopep8', 'autoimport', 'reorder-python-imports'],
\}
"let g:ale_python_autoimport_executable='python -m autoimport'
"let g:ale_python_autopep8_options='--ignore E301'

let g:ale_linters = {
      \   'python': ['flake8'],
      \}
nnoremap <leader>f :ALEFix<cr>
nnoremap <leader>j :ALENext<cr>
nnoremap <leader>k :ALEPrevious<cr>

"set completeopt-=preview
set conceallevel=0 " json quotes

" Semshi
nmap <silent> <leader>ee :Semshi error<CR>
